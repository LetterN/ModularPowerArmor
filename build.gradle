buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

def buildnumber = System.getenv("BUILD_NUMBER")
def travisbuildnumber = (System.getenv("TRAVIS_BUILD_NUMBER") ?: -000).toInteger() + 00
version = "${mod_version}.${buildnumber ?: travisbuildnumber}"
group = group_id // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "ModularPowerArmor-${minecraft_version}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }

    maven { // TOP
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }

    flatDir {
        dirs 'mods'
    }
}

minecraft {
    mappings channel: "snapshot", version: "${project.mcp_version}".toString()
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run').canonicalPath

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            ideaModule project.group + ".main"

            mods {
                modularpowerarmor {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run').canonicalPath

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            ideaModule project.group + ".main"

            mods {
                modularpowerarmor {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/')

            mods {
                modularpowerarmor {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft([
            group  : "${project.forgegroup}",
            name   : "forge",
            version: "${project.minecraft_version}-${project.forge_version}"
    ])

    // compile against the JEI API but do not include it at runtime
    // currently not actually using any JEI code, just using it as a matter of convienience for testing.
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")

    // at runtime, use the full JEI jar
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

//    runtimeOnly fg.deobf("top.theillusivec4.caelus:caelus:FORGE-${minecraft_version}-${caelus_version}")
//    compileOnly fg.deobf("top.theillusivec4.caelus:caelus:FORGE-${minecraft_version}-${caelus_version}")

//    runtimeOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-${top_version}")
    runtimeOnly fg.deobf(project.dependencies.create("mcjty.theoneprobe:TheOneProbe-${top_version}") {
        transitive = false
    })

    // almost works, but no
/*
SilentLib-1.14.4-4.4.0+44.jar
files(...) dependencies are not deobfuscated. Use a flatDir repository instead: https://docs.gradle.org/current/userguide/repository_types.html#sec:flat_dir_resolver
Cannot deobfuscate dependency of type DefaultSelfResolvingDependency_Decorated, using obfuscated version!
SilentMechanisms-1.14.4-0.6.13+49.jar
files(...) dependencies are not deobfuscated. Use a flatDir repository instead: https://docs.gradle.org/current/userguide/repository_types.html#sec:flat_dir_resolver
Cannot deobfuscate dependency of type DefaultSelfResolvingDependency_Decorated, using obfuscated version!
New Dep: net.minecraftforge:forge:1.14.4-28.2.3_mapped_snapshot_20200119-1.14.4_at_a5f094ffe7a783ab5ac828fa111f5692fc8c1705
 */
//    fileTree(dir: 'mods', include: ['*.jar'], each: {
//        File file ->
//            println file.name
//            runtimeOnly fg.deobf(files(file.name))
//    })

//    compile fileTree(include: ['*.jar'], dir: 'mods')

    compile fileTree(dir: 'libs', include: ['*.jar'])
}

jar {
    manifest {
        attributes(["Specification-Title": project.name,
                    "Specification-Vendor"    : "lehjr",
                    "Specification-Version"   : "1", // We are version 1 of the modlauncher specification
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : "${version}",
                    "Implementation-Vendor"   : "lehjr",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    "FMLAT"                   : "accesstransformer.cfg"
        ],)
    }
}

// Process resources on build
processResources {
    // This will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version

    // Replace stuff in mods.toml, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        // Replace version
        expand 'version': project.version
    }

    // Copy everything else except the mods.toml
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

task devJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

artifacts {
    archives devJar
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}